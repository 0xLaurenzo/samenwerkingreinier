#include <iostream>
#include <cassert>
#include <fstream>
#include <vector>

using namespace std;

struct Gifts
{
    int stock;
    int price;
    string item;
};

struct Wishlist
{
    int stock;
    int price;
    string item;
};

istream& operator>> (istream& in, Gifts& gifts)
{
    char c;
    in >> gifts.stock;
    in >> gifts.price;
    in.get(c);
    getline(in, gifts.item);
    return in;
}

void enter_filename(ifstream& file)
{
    //preconditions:
    assert(true);
    //postconditions: allows the user to enter a filename of a wishlist and opens this wishlist.
    string filename;
    cout << "Enter a filename of a wishlist: ";
    cin >> filename;
    file.open(filename);
}

int  read_gift_store(vector<Gifts>& items)
{
    //preconditions:
    assert(items.empty());
    //postconditions:opens and reads the giftstore file.
    ifstream file;
    file.open("giftstore.txt");
    if (!file.is_open())
    {
        return 1;
    }
    while (file)
    {
        Gifts gift;
        file >> gift;
        if (gift.item != "")
        {
            items.push_back(gift);
        }
    }
    return 0;
}

int read_wishlist(vector<string>& items, ifstream& file, int& budget)
{
    //preconditions:
    assert(items.empty());
    //preconditions reads the budget and items in the wishlist and places them in a vector
    if (!file.is_open())
    {
        return 1;
    }
    string c;
    file >> budget;
    getline(file, c);
    while (file)
    {
        string wish;
        getline(file, wish);
        if (wish != "")
        {
            items.push_back(wish);
        }
    }
    return 0;
}

void wishlist_pair(vector<string> old_list, vector<Wishlist>& wishlist, vector<Gifts> store)
{
    Wishlist stuff;
    assert(!old_list.empty());
    // All the items from the wishlist are combined with their price from the store and stored in
    // a vector with using the Wishlist struct
    for(int i = 0; i < old_list.size(); i++)
    {
        for(int j = 0; j < store.size(); j++)
        {
            if(old_list[i] == store[j].item)
            {
                stuff.stock = store[j].stock;
                stuff.price = store[j].price;
                stuff.item = old_list[i];
                wishlist.push_back(stuff);
            }
        }
    }
}

int gifts(vector<Wishlist> wishlist, int wishlist_index, int total_price, int budget, int& answer,
          vector<Wishlist>& possible_gifts)
{
    assert(!wishlist.empty());
    // postconditions, this function tests what the combination in the wishlist is, with the highest combined amount
    // which fits int the budget
    vector<Wishlist> current_gifts;
    int current_price = 0;
    int total_price_buffer = 0;
    if (wishlist_index == wishlist.size())
    {
        return  0;
    }
    current_price += wishlist[wishlist_index].price;
    for (int i = wishlist_index; i < wishlist.size(); i++)
    {
        if (current_price + wishlist[i].price <= budget && wishlist[i].stock > 0)
        {
            current_gifts.push_back(wishlist.[i]);
            current_price += wishlist[i].price;
        }
    }
    if (current_price > total_price && current_price <= budget)
    {
        total_price = current_price;
    }
    gifts(wishlist, wishlist_index + 1, total_price, budget, answer, possible_gifts);
    total_price_buffer = total_price - wishlist[wishlist_index].price;
    gifts(wishlist, wishlist_index + 1, total_price_buffer, budget, answer, possible_gifts);
    if(total_price > answer)
    {
        answer = total_price;
    }
}

void store_adjustment(vector<Gifts>& store, vector<Wishlist> given_gifts)
{
    for (int i = 0; i < given_gifts.size(); i++)
    {
        for (int j = 0; j < store.size(); j++)
        {
            if (given_gifts[i].item == store[j].item)
            {
                store[j].stock--;
            }
        }
    }
}

int main()
{
    ifstream wishlist_file;
    vector<string> old_wishlist;
    vector<Gifts> store;
    vector<Wishlist> new_wishlist;
    vector<Wishlist> to_be_given;
    string choice;
    char cont;
    int budget = 0;
    int total_price = 0;
    int answer = 0;
    bool cont = true;
    while (cont)
    {
        cout << "Vul naam in (Andrew / Belle / Chris / Desiree / Edward / Fabienne): " << endl;
        cin >> choice;
        switch (choice)
        {
        case "Andrew" :
        {
            wishlist_file.open("Andrew.txt");
            read_gift_store(store);
            read_wishlist(old_wishlist, wishlist_file, budget);
            wishlist_pair(old_wishlist, new_wishlist, store);
            cout << "Budget: " << budget << endl;
            gifts(new_wishlist, 0, total_price, budget, answer, to_be_given);
            cout << "Answer: " << answer << endl;
            cout << endl;
            store_adjustment(store, new_wishlist);
            cout << "Nog iemand bekijken? [Y]es / [N]o" << endl;
            cin >> cont;
            if (cont != 'y' || cont != 'Y')
                cont = false;
            cout << endl;
            break;
        }
        case "Belle" :
        {
            wishlist_file.open("Belle.txt");
            read_gift_store(store);
            read_wishlist(old_wishlist, wishlist_file, budget);
            wishlist_pair(old_wishlist, new_wishlist, store);
            cout << "Budget: " << budget << endl;
            gifts(new_wishlist, 0, total_price, budget, answer, to_be_given);
            cout << "Answer: " << answer << endl;
            cout << endl;
            store_adjustment(store, new_wishlist);
            cout << "Nog iemand bekijken? [Y]es / [N]o" << endl;
            cin >> cont;
            if (cont != 'y' || cont != 'Y')
                cont = false;
            cout << endl;
            break;
        }
        case "Chris" :
        {
            wishlist_file.open("Chris.txt");
            read_gift_store(store);
            read_wishlist(old_wishlist, wishlist_file, budget);
            wishlist_pair(old_wishlist, new_wishlist, store);
            cout << "Budget: " << budget << endl;
            gifts(new_wishlist, 0, total_price, budget, answer, to_be_given);
            cout << "Answer: " << answer << endl;
            cout << endl;
            store_adjustment(store, new_wishlist);
            cout << "Nog iemand bekijken? [Y]es / [N]o" << endl;
            cin >> cont;
            if (cont != 'y' || cont != 'Y')
                cont = false;
            cout << endl;
            break;
        }
        case "Desiree" :
        {
            wishlist_file.open("Desiree.txt");
            read_gift_store(store);
            read_wishlist(old_wishlist, wishlist_file, budget);
            wishlist_pair(old_wishlist, new_wishlist, store);
            cout << "Budget: " << budget << endl;
            gifts(new_wishlist, 0, total_price, budget, answer, to_be_given);
            cout << "Answer: " << answer << endl;
            cout << endl;
            store_adjustment(store, new_wishlist);
            cout << "Nog iemand bekijken? [Y]es / [N]o" << endl;
            cin >> cont;
            if (cont != 'y' || cont != 'Y')
                cont = false;
            cout << endl;
            break;
        }
        case "Edward" :
        {
            wishlist_file.open("Edward.txt");
            read_gift_store(store);
            read_wishlist(old_wishlist, wishlist_file, budget);
            wishlist_pair(old_wishlist, new_wishlist, store);
            cout << "Budget: " << budget << endl;
            gifts(new_wishlist, 0, total_price, budget, answer, to_be_given);
            cout << "Answer: " << answer << endl;
            cout << endl;
            store_adjustment(store, new_wishlist);
            cout << "Nog iemand bekijken? [Y]es / [N]o" << endl;
            cin >> cont;
            if (cont != 'y' || cont != 'Y')
                cont = false;
            cout << endl;
            break;
        }
        case "Fabienne" :
        {
            wishlist_file.open("Fabienne.txt");
            read_gift_store(store);
            read_wishlist(old_wishlist, wishlist_file, budget);
            wishlist_pair(old_wishlist, new_wishlist, store);
            cout << "Budget: " << budget << endl;
            gifts(new_wishlist, 0, total_price, budget, answer, to_be_given);
            cout << "Answer: " << answer << endl;
            cout << endl;
            store_adjustment(store, new_wishlist);
            cout << "Nog iemand bekijken? [Y]es / [N]o" << endl;
            cin >> cont;
            if (cont != 'y' || cont != 'Y')
                cont = false;
            cout << endl;
            break;
        }
        default :
        {
            cout << "Huh?" << endl;
        }
        }
    }
    return 0;
}
