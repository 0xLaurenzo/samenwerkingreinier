/*
Reinier Sanders, s4335422
Laurens Kubat, s4626249
*/

#include <iostream>
#include <string>
#include <fstream>
#include <vector>

using namespace std;

struct Repetition {
    vector<vector<char> > puzzle;
    int x_cord_w;
    int y_cord_w;
};

string enter_filename() {
    string filename;
    cout << "Enter the filename: ";
    cin >> filename;
    return filename;
}

int read_file(vector<vector<char> > &puzzle) {
    ifstream infile;
    vector<char> buffer_vector;
    char c;
    infile.open(enter_filename().c_str());
    if (!infile) {
        cout << "file not read correctly.";
        return 1;
    }
    while (infile) {
        infile.get(c);
        if (c == '\n') {
            puzzle.push_back(buffer_vector);
            while (!buffer_vector.empty()) {
                buffer_vector.pop_back();
            }
        }
        if (c != '\n') {
            buffer_vector.push_back(c);
        }
    }
    cout << "file read.\n";
    return 0;
}

void print_puzzle(vector<vector<char> >& puzzle) {
    for (int i = 0; i < puzzle.size(); i++) {
        for (int j = 0; j < puzzle[i].size(); j++) {
            cout << puzzle[i][j];
        }
        cout << endl;
    }
}

bool valid_move_north(vector<vector<char> > &puzzle, int i, int j, vector<Repetition>& repetitions) {
    // postconditions: This functions first check if the location the worker wants to move to is a wall. Then it checks
    // if the checks that the current situation has never happened before.
    if (puzzle[i - 1][j] == '*') {
        return false;
    }
    if (puzzle[i - 1][j] == 'b' || puzzle[i - 1][j] == 'B') {
        if (puzzle[i - 2][j] == 'b' || puzzle[i - 2][j] == 'B' || puzzle[i - 2][j] == '*') {
            return false;
        }
        return true;
    }
    if (repetitions.empty()) {
        return true;
    }
    for (int u = 0; u < repetitions.size(); u++) {
        if (repetitions[u].x_cord_w == j || repetitions[u].y_cord_w == i) {
            for (int v = 0; v < repetitions[u].puzzle.size(); v++) {
                for (int w = 0; w < repetitions[u].puzzle[v].size(); w++) {
                    if (repetitions[u].puzzle[v][w] != puzzle[v][w]) {
                        return true;
                    }
                }
            }
        }
    }
    return false;
}

bool valid_move_south(vector<vector<char> >& puzzle, int i, int j, vector<Repetition>& repetitions) {
    // postconditions: This functions first check if the location the worker wants to move to is a wall. Then it checks
    // if the checks that the current situation has never happened before.
    if (puzzle[i + 1][j] == '*') {
        return false;
    }
    if (puzzle[i + 1][j] == 'b' || puzzle[i + 1][j] == 'B') {
        if (puzzle[i + 2][j] == 'b' || puzzle[i + 2][j] == 'B' || puzzle[i + 2][j] == '*') {
            return false;
        }
        return true;
    }
    if (repetitions.empty()) {
        return true;
    }
    for (int u = 0; u < repetitions.size(); u++) {
        if (repetitions[u].x_cord_w == j || repetitions[u].y_cord_w == i) {
            for (int v = 0; v < repetitions[u].puzzle.size(); v++) {
                for (int w = 0; w < repetitions[u].puzzle[v].size(); w++) {
                    if (repetitions[u].puzzle[v][w] != puzzle[v][w]) {
                        return true;
                    }
                }
            }
        }
    }
    return false;
}

bool valid_move_east(vector<vector<char> >& puzzle, int i, int j, vector<Repetition>& repetitions) {
    // postconditions: This functions first check if the location the worker wants to move to is a wall. Then it checks
    // if the checks that the current situation has never happened before.
    if (puzzle[i][j + 1] == '*') {
        return false;
    }
    if (puzzle[i][j + 1] == 'b' || puzzle[i][j + 1] == 'B') {
        if (puzzle[i][j + 2] == 'b' || puzzle[i][j + 2] == 'B' || puzzle[i][j + 2] == '*') {
            return false;
        }
        return true;
    }
    if (repetitions.empty()) {
        return true;
    }
    for (int u = 0; u < repetitions.size(); u++) {
        if (repetitions[u].x_cord_w == j || repetitions[u].y_cord_w == i) {
            for (int v = 0; v < repetitions[u].puzzle.size(); v++) {
                for (int w = 0; w < repetitions[u].puzzle[v].size(); w++) {
                    if (repetitions[u].puzzle[v][w] != puzzle[v][w]) {
                        return true;
                    }
                }
            }
        }
    }
    return false;
}

bool valid_move_west(vector<vector<char> >& puzzle, int i, int j, vector<Repetition>& repetitions) {
    // postconditions: This functions first check if the location the worker wants to move to is a wall. Then it checks
    // if the checks that the current situation has never happened before.
    if (puzzle[i][j - 1] == '*') {
        return false;
    }
    if (puzzle[i][j - 1] == 'b' || puzzle[i][j - 1] == 'B') {
        if (puzzle[i][j - 2] == 'b' || puzzle[i][j - 2] == 'B' || puzzle[i][j - 2] == '*') {
            return false;
        }
        return true;
    }
    if (repetitions.empty()) {
        return true;
    }
    for (int u = 0; u < repetitions.size(); u++) {
        if (repetitions[u].x_cord_w == j || repetitions[u].y_cord_w == i) {
            for (int v = 0; v < repetitions[u].puzzle.size(); v++) {
                for (int w = 0; w < repetitions[u].puzzle[v].size(); w++) {
                    if (repetitions[u].puzzle[v][w] != puzzle[v][w]) {
                        return true;
                    }
                }
            }
        }
    }
    return false;
}

void go_north(vector<vector<char> > &puzzle, int i, int j, vector<Repetition> &repetitions) {
    vector<vector<char> > new_rep;
    vector<char> buffer_vector;
    Repetition buffer;
    if (valid_move_north(puzzle, i, j, repetitions)) {
        for (int u = 0; u < puzzle.size(); u++) {
            for (int v = 0; v < puzzle[u].size(); v++) {
                buffer_vector.push_back(puzzle[u][v]);
            }
            new_rep.push_back(buffer_vector);
            while (!buffer_vector.empty()) {
                buffer_vector.pop_back();
            }
        }
        buffer.y_cord_w = i;
        buffer.x_cord_w = j;
        buffer.puzzle = new_rep;
        repetitions.push_back(buffer);
        if (puzzle[i][j] == 'b' || puzzle[i][j] == 'B') {
            if (puzzle[i][j] == 'B') {
                puzzle[i][j] = 'W';
            } else {
                puzzle[i][j] = 'w';
            }
            if (puzzle[i - 1][j] == '.') {
                puzzle[i - 1][j] = 'B';
            } else {
                puzzle[i - 1][j] = 'b';
            }
        }
        if (puzzle[i + 1][j] == 'W') {
            puzzle[i + 1][j] = '.';
        }
        if (puzzle[i + 1][j] == 'w') {
            puzzle[i + 1][j] = ' ';
        }
        if (puzzle[i][j] == '.') {
            puzzle[i][j] = 'W';
        } else {
            puzzle[i][j] = 'w';
        }
    }
}

void go_south(vector<vector<char> > &puzzle, int i, int j, vector<Repetition> &repetitions) {
    vector<vector<char> > new_rep;
    vector<char> buffer_vector;
    Repetition buffer;
    if (valid_move_south(puzzle, i, j, repetitions)) {
        for (int u = 0; u < puzzle.size(); u++) {
            for (int v = 0; v < puzzle[u].size(); v++) {
                buffer_vector.push_back(puzzle[u][v]);
            }
            new_rep.push_back(buffer_vector);
            while (!buffer_vector.empty()) {
                buffer_vector.pop_back();
            }
        }
        buffer.y_cord_w = i;
        buffer.x_cord_w = j;
        buffer.puzzle = new_rep;
        repetitions.push_back(buffer);
        if (puzzle[i][j] == 'b' || puzzle[i][j] == 'B') {
            if (puzzle[i][j] == 'B') {
                puzzle[i][j] = 'W';
            } else {
                puzzle[i][j] = 'w';
            }
            if (puzzle[i + 1][j] == '.') {
                puzzle[i + 1][j] = 'B';
            } else {
                puzzle[i + 1][j] = 'b';
            }
        }
        if (puzzle[i - 1][j] == 'W') {
            puzzle[i - 1][j] = '.';
        } else {
            puzzle[i - 1][j] = ' ';
        }
        if (puzzle[i][j] == '.') {
            puzzle[i][j] = 'W';
        } else {
            puzzle[i][j] = 'w';
        }
    }
}

void go_east(vector<vector<char> > &puzzle, int i, int j, vector<Repetition> &repetitions) {
    vector<vector<char> > new_rep;
    vector<char> buffer_vector;
    Repetition buffer;
    if (valid_move_east(puzzle, i, j, repetitions)) {
        for (int u = 0; u < puzzle.size(); u++) {
            for (int v = 0; v < puzzle[u].size(); v++) {
                buffer_vector.push_back(puzzle[u][v]);
            }
            new_rep.push_back(buffer_vector);
            while (!buffer_vector.empty()) {
                buffer_vector.pop_back();
            }
        }

        buffer.y_cord_w = i;
        buffer.x_cord_w = j;
        buffer.puzzle = new_rep;

        repetitions.push_back(buffer);
        if (puzzle[i][j] == 'b' || puzzle[i][j + 1] == 'B') {
            if (puzzle[i][j] == 'B') {
                puzzle[i][j] = 'W';
            } else {
                puzzle[i][j] = 'w';
            }
            if (puzzle[i][j + 1] == '.') {
                puzzle[i][j + 1] = 'B';
            } else {
                puzzle[i][j + 1] = 'b';
            }
        }
        if (puzzle[i][j - 1] == 'W') {
            puzzle[i][j - 1] = '.';
        } else {
            puzzle[i][j - 1] = ' ';
        }
        if (puzzle[i][j] == '.') {
            puzzle[i][j] = 'W';
        } else {
            puzzle[i][j] = 'w';
        }
    }
}

void go_west(vector<vector<char> > &puzzle, int i, int j, vector<Repetition> &repetitions) {
    vector<vector<char> > new_rep;
    vector<char> buffer_vector;
    Repetition buffer;
    if (valid_move_west(puzzle, i, j, repetitions)) {
        for (int u = 0; u < puzzle.size(); u++) {
            for (int v = 0; v < puzzle[u].size(); v++) {
                buffer_vector.push_back(puzzle[u][v]);
            }
            new_rep.push_back(buffer_vector);
            while (!buffer_vector.empty()) {
                buffer_vector.pop_back();
            }
        }
        buffer.y_cord_w = i;
        buffer.x_cord_w = j;
        buffer.puzzle = new_rep;
        repetitions.push_back(buffer);
        if (puzzle[i][j] == 'b' || puzzle[i][j] == 'B') {
            if (puzzle[i][j] == 'B') {
                puzzle[i][j] = 'W';
            } else {
                puzzle[i][j] = 'w';
            }
            if (puzzle[i][j - 1] == '.') {
                puzzle[i][j - 1] = 'B';
            } else {
                puzzle[i][j - 1] = 'b';
            }
        }
        if (puzzle[i][j + 1] == 'W') {
            puzzle[i][j + 1] = '.';
        } else {
            puzzle[i][j + 1] = ' ';
        }
        if (puzzle[i][j] == '.') {
            puzzle[i][j] = 'W';
        } else {
            puzzle[i][j] = 'w';
        }
    }
}

bool challenge_finished(vector<vector<char> >& puzzle) {
    cout << "in challenge";
    for (int i = 0; i < puzzle.size(); i++) {
        for (int j = 0; j < puzzle[i].size(); j++) {
            if (puzzle[i][j] == 'b'){
                cout << "false" << endl;
                return false;
            }
        }
    }
    cout << "true" << endl;
    return true;
}

void find_start(vector<vector<char> >& puzzle, int &start_y, int &start_x) {
    for (int i = 0; i < puzzle.size(); i++) {
        for (int j = 0; j < puzzle[i].size(); j++) {
            if (puzzle[i][j] == 'w' || puzzle[i][j] == 'W') {
                start_x = j;
                start_y = i;
            }
        }
    }
}

void breadth_first() {

}

void depth_first(vector<vector<char> > &puzzle, int move_count, int& final_count, int x_cord, int y_cord, vector<Repetition> &reps) {
    int t;
    cin >> t;
    if (challenge_finished(puzzle)) {
        if (final_count == 0) {
            move_count = final_count;
        }
        if (move_count < final_count) {
            move_count = final_count;
        }
        return;
    }
    vector<vector<char> > buffer_puzzle;
    vector<char> copy_buffer;
    for (int u = 0; u < puzzle.size(); u++) {
        for (int v = 0; v < puzzle[u].size(); v++) {
            copy_buffer.push_back(puzzle[u][v]);
        }
        buffer_puzzle.push_back(copy_buffer);
        while (!copy_buffer.empty()) {
            copy_buffer.pop_back();
        }
    }
    if (valid_move_north(buffer_puzzle, y_cord, x_cord, reps)) {
        cout << "North is valid\n";
        vector<vector<char> > buffer_puzzle_north;
        vector<char> copy_buffer;
        for (int u = 0; u < puzzle.size(); u++) {
            for (int v = 0; v < puzzle[u].size(); v++) {
                copy_buffer.push_back(puzzle[u][v]);
            }
            buffer_puzzle_north.push_back(copy_buffer);
            while (!copy_buffer.empty()) {
                copy_buffer.pop_back();
            }
        }
        go_north(buffer_puzzle_north, y_cord - 1, x_cord, reps);
        print_puzzle(buffer_puzzle_north);
        depth_first(buffer_puzzle_north, move_count + 1, final_count, x_cord, y_cord - 1, reps);
    }
    if (valid_move_east(buffer_puzzle, y_cord, x_cord, reps)) {
        cout << "East is valid\n";
        vector<vector<char> > buffer_puzzle_east;
        vector<char> copy_buffer;
        for (int u = 0; u < puzzle.size(); u++) {
            for (int v = 0; v < puzzle[u].size(); v++) {
                copy_buffer.push_back(puzzle[u][v]);
            }
            buffer_puzzle_east.push_back(copy_buffer);
            while (!copy_buffer.empty()) {
                copy_buffer.pop_back();
            }
        }
        go_east(buffer_puzzle_east, y_cord, x_cord + 1, reps);
        print_puzzle(buffer_puzzle_east);
        depth_first(buffer_puzzle_east, move_count + 1, final_count, x_cord + 1, y_cord, reps);
    }
    if (valid_move_south(buffer_puzzle, y_cord, x_cord, reps)) {
        cout << "South is valid\n";
        vector<vector<char> > buffer_puzzle_south;
        vector<char> copy_buffer;
        for (int u = 0; u < puzzle.size(); u++) {
            for (int v = 0; v < puzzle[u].size(); v++) {
                copy_buffer.push_back(puzzle[u][v]);
            }
            buffer_puzzle_south.push_back(copy_buffer);
            while (!copy_buffer.empty()) {
                copy_buffer.pop_back();
            }
        }
        go_south(buffer_puzzle_south, y_cord + 1, x_cord, reps);
        print_puzzle(buffer_puzzle_south);
        depth_first(buffer_puzzle_south, move_count + 1, final_count, x_cord, y_cord + 1, reps);
    }
    if (valid_move_west(buffer_puzzle, y_cord, x_cord, reps)) {
        cout << "West is valid\n";
        vector<vector<char> > buffer_puzzle_west;
        vector<char> copy_buffer;
        for (int u = 0; u < puzzle.size(); u++) {
            for (int v = 0; v < puzzle[u].size(); v++) {
                copy_buffer.push_back(puzzle[u][v]);
            }
            buffer_puzzle_west.push_back(copy_buffer);
            while (!copy_buffer.empty()) {
                copy_buffer.pop_back();
            }
        }
        go_west(buffer_puzzle_west, y_cord, x_cord - 1, reps);
        print_puzzle(buffer_puzzle_west);
        depth_first(buffer_puzzle_west, move_count + 1, final_count, x_cord - 1, y_cord, reps);
    }
}

int main() {
    vector<vector<char> > puzzle;
    vector<Repetition> reps;
    int x_cord = 1, y_cord = 1;
    int final_count = 0;
    int move_count = 0;
    read_file(puzzle);
    find_start(puzzle, y_cord, x_cord);
    print_puzzle(puzzle);
    depth_first(puzzle, move_count, final_count, x_cord, y_cord, reps);
    return 0;
}
