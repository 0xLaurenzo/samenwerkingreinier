
/*
Assignment 10
Reinier Sanders,    s4335422
Laurens Kubat,      s4626249
*/

#include<iostream>
#include <vector>
#include <cmath>

using namespace std;

/*
<-- Part 1 -->
(a)
3 inputs n, m, o: integers year, day & month.
Variables that have already been computed, don't need to be computed again.
So we can just take them as constants when used by other calculations.

O(f(n,m,o))=
O(a+b+c+d+e+f+g+h+i+K+L+m+month+day)=
O((n%19)+(n/100)+(n%100)+(b/4)+(b%4)+((b+8)/25)+((b-f+1)/3)+((19*a+b-d-g+15)%30)+(c/4)+(c%4)+((32+2*e+2*i-h-k)%7)+((a+11*h+22*L)/451)+((h+L-7*m+114)/31)+((h+L-7*m+114)%31)+1)=
O(n+n+n+n+n+n+n+2*n+n+n+3*n+3*n+2*m+2*o)=
O((17*n)+(2*m)+(2*o))=
O(n+m+o)

(b)
2 inputs n, m: integers x & divisor.

We perform a calculation of

O(f(n,m))=
O(n%m)=
O(nm)

a square root of n times, so:

O(f(n,m))=
O(sqrt(n)*(nm))=

<-- Part 2 -->
(a)
array = {15, 40, 42, -15, 30, 35, 5}.

Initial tree:
       15
     /    \
   40      42
  /  \    /  \
-15  30  35   5

Phase 1:
We start at A[0]. We first check A[1]. 40 > 15, so 40 gets pushed up:
       40
     /    \
   15      42
  /  \    /  \
-15  30  35   5

Then we check A[2]. 42 > 40, so 42 gets pushed up:
       42
     /    \
   15      40
  /  \    /  \
-15  30  35   5

Then it checks A[3]. -15 < 15, so it stays. A[4] = 30, 30 > 15, so 30 gets pushed up:
       42
     /    \
   30      40
  /  \    /  \
-15  15  35   5

After that, we go to A[5], which is 35. 35 < 40, so it stays. A[6] stays as well, since 5 < 40.

Phase 2:

We start with A[7] = {42,30,40,-15,15,35,5}.
We swap the last index, i, with the first element. {5,30,40,-15,15,35,42}
We push_back 5 {5,30,40,-15,15,35,42} -> {30,5,40,-15,15,35,42}-> {30,15,40,-15,5,35,42}.
We push back 30 {30,15,40,-15,5,35,42} -> {40,15,30,-15,5,35,42} -> {40,15,35,-15,5,30,42}.
We now have a correct heap
We swap i - 1 with the first element {30,15,35,-15,5,40,42}
We push_back 30 {30,15,35,-15,5,40,42} -> {35,15,30,-15,5,40,42}
We now have a correct heap.
We swap i - 2 with the first element {5,15,30,-15,35,40,42}
We push_back 5 {5,15,30,-15,35,40,42} -> {15,5,30,-15,35,40,42} -> {15,-15,30,5,35,40,42}
We now have a correct heap
We swap i - 3 {5,-15,30,15,35,40,42}
We push_back 5 {5,-15,30,15,35,40,42} -> {30,-15,5,15,35,40,42}
we now have a correct heap
We swap i - 4 {15,-15,5,30,35,40,42}
We now have a correct heap
We swap i - 5 {5,-15,15,30,35,40,42}
We now have a correct heap
We swap i - 6 {-15,5,15,30,35,40,42}
This finishes the algortihm

order of runtime complexity:
push up: O(f(n)) = O(log(n))
build_heap: O(f(n)) = O(log(n))
push_down: O(f(n)) = O(log(n))
swap: O(f(n)) = O(log(n))
pick_heap: O(f(n)) = O(log(n))

Operations in a binomial heap are of runtime complexity order O(log(n))
Thus the runtime complexity order of heap sort is O(log(n)) for an array of n elements.
Phase 3
*/

bool has_child(int parent, int vectsize) {
    return parent * 2 < vectsize;
}

bool is_heap(vector<int> &intvect, int end_of_array) {
    for (int i = end_of_array; i >= 0; i--) {
        if (i > (i - 1) / 2) {
            return false;
        }
    }
    return true;
}

void push_up(vector<int> &intvect) {
    int buffer = 0;
    for (int i = 0; i < intvect.size(); i++) {
        int child = i;
        while (intvect[child] > intvect[(child - 1) / 2]) {
            int parent = (child - 1) / 2;
            buffer = intvect[parent];
            intvect[parent] = intvect[child];
            intvect[child] = buffer;
            child = parent;
        }
    }
}

void push_down(vector<int> &intvect, int end_of_array) {
        int buffer = 0;
        int parent = 0;
        int child1 = parent * 2 + 1;
        int child2 = parent * 2 + 2;
        if (has_child(parent, end_of_array)) {

            while (intvect[parent] < intvect[child1] || has_child(parent, end_of_array - 1) &&
                    intvect[parent] < intvect[child2]) {
                cout << "test1" << endl;
                if (!has_child(parent, end_of_array - 1) || intvect[child1] > intvect[child2]) {
                    if (intvect[child1] > intvect[parent]) {
                        buffer = intvect[parent];
                        intvect[parent] = intvect[child1];
                        intvect[child1] = buffer;
                        parent = child1;
                        child1 = parent * 2 + 1;
                        child2 = parent * 2 + 2;
                    }
                }
                else if (intvect[child1] < intvect[child2]) {
                    if (intvect[child2] > intvect[parent]) {
                        buffer = intvect[parent];
                        intvect[parent] = intvect[child2];
                        intvect[child2] = buffer;
                        parent = child2;
                        child1 = parent * 2 + 1;
                        child2 = parent * 2 + 2;
                    }
                } else
                    break;
            }

    }
}

void swap(vector<int> &intvect, int &end_of_array) {
    int buffer = 0;
    buffer = intvect[0];
    intvect[0] = intvect[end_of_array];
    intvect[end_of_array] = buffer;
    end_of_array--;
}

void build_heap(vector<int> &intvect) {
    push_up(intvect);
}

void pick_heap(vector<int> &intvect) {
    int end_of_array = intvect.size() - 1;
    while (end_of_array > 0) {
        swap(intvect, end_of_array);
        cout << "swap";
        for (int i = 0; i < intvect.size(); i++) {
            cout << intvect[i] << " ";
        }
        cout << endl;
        push_down(intvect, end_of_array);
        cout << "push_down ";
        for (int i = 0; i < intvect.size(); i++) {
            cout << intvect[i] << " ";
        }
        cout << endl;
    }
}

int main() {
    vector<int> intvect = {1, 2, 5, 8, 334, -742, 23};
    build_heap(intvect);
    cout << "Build heap:" << endl;
    for (int i = 0; i < intvect.size(); i++) {
        cout << intvect[i] << " ";
    }
    cout << endl;
    cout << "Pick heap:" << endl;
    pick_heap(intvect);
    for (int i = 0; i < intvect.size(); i++) {
        cout << intvect[i] << " ";
    }
    return 0;
}

