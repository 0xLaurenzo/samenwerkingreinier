/*
Assignment 10
Reinier Sanders,    s4335422
Laurens Kubat,      s4626249
*/

#include<iostream>

using namespace std;

/*
<-- Part 1 -->
(a)
3 inputs n, m, o: integers year, day & month.
Variables that have already been computed, don't need to be computed again.
So we can just take them as constants when used by other calculations.

O(f(n,m,o))=
O(a+b+c+d+e+f+g+h+i+K+L+m+month+day)=
O((n%19)+(n/100)+(n%100)+(b/4)+(b%4)+((b+8)/25)+((b-f+1)/3)+((19*a+b-d-g+15)%30)+(c/4)+(c%4)+((32+2*e+2*i-h-k)%7)+((a+11*h+22*L)/451)+((h+L-7*m+114)/31)+((h+L-7*m+114)%31)+1)=
O(n+n+n+n+n+n+n+2*n+n+n+3*n+3*n+2*m+2*o)=
O((17*n)+(2*m)+(2*o))=
O(n+m+o)

(b)
2 inputs n, m: integers x & divisor.

We perform a calculation of

O(f(n,m))=
O(n%m)=
O(nm)

a square root of n times, so:

O(f(n,m))=
O(sqrt(n)*(nm))=

<-- Part 2 -->
(a)
array = {15, 40, 42, -15, 30, 35, 5}.

Initial tree:
       15
     /    \
   40      42
  /  \    /  \
-15  30  35   5

Phase 1:
We start at A[0]. We first check A[1]. 40 > 15, so 40 gets pushed up:
       40
     /    \
   15      42
  /  \    /  \
-15  30  35   5

Then we check A[2]. 42 > 40, so 42 gets pushed up:
       42
     /    \
   15      40
  /  \    /  \
-15  30  35   5

Then it checks A[3]. -15 < 15, so it stays. A[4] = 30, 30 > 15, so 30 gets pushed up:
       42
     /    \
   30      40
  /  \    /  \
-15  15  35   5

After that, we go to A[5], which is 35. 35 < 40, so it stays. A[6] stays as well, since 5 < 40.

Phase 2:
We start with A[7] = {42,30,40,-15,15,35,5}.
We swap the last index with the first: {5,30,40,-15,15,35,42}.
The new A[0] gets pushed down as long as its value is smaller than one of its childs:
{5,30,40,-15,15,35,42} -> {30,5,40,-15,15,35,42} -> {30,15,40,-15,5,35,42}.
Then we swap the i-1 index with the first again: {35,15,40,-15,5,30,42}.
35 is smaller than than 40, so it gets pushed down:
{40,15,35,-15,5,30,42} -> {40,15,42,-15,5,30,35}.
Then we swap the i-2 index with the first: {5,15,42,-15,40,30,35}.
15 is smaller than 35, so it gets pushed down: 

*/
int main()
{
    cout << "beep boop\n";
    cout << "if(!do_stuff){\n";
    cout << "\tdo_stuff();\n";
    cout << "}";
    return 0;
}
