#include <iostream>
#include <cassert>
#include <string>
using namespace std;

/* assignment 11
   Reinier Sanders,    s4335422
   Laurens Kubat,      s4626249
 */
double power(double base, int exponent){
    // preconditions
    assert(exponent >= 0);
    // postconditions the result is recursively multiplied by its own base until the exponent reaches 0.
    double result = 0;
    if (exponent == 0){
        result = 1;
    }
    else{
        result = base * power(base, exponent - 1);
    }
    return  result;
}

double better_power(double base, int exponent) {
    assert(exponent >= 0 );
    double buffer = 0;
    double result = 0;
    if (exponent == 0){
        result = 1;
        return result;
    }
    if (exponent % 2 == 0 ){
        exponent = exponent / 2;
        buffer = better_power(base, exponent);
        result = buffer * buffer;
        return result;
    }
    exponent = exponent / 2;
    buffer = better_power(base, exponent);
    result = base * buffer * buffer;
    return result;
}
// Runtime order to be added.

bool palindrome1(string text, int i, int j){
    if (text[i] != text[j]){
        return false;
    }
    if (i < j) {
        palindrome1(text, i - 1, j - 1);
    }
    return true;
}

bool palindrome2 (string text, int i, int j){
    for (int i = 0; i < text.length(); i++){
        text[i] = tolower(text[i]);
    }
    if (text[i] != text[j]){
        return false;
    }
    if (i < j) {
        palindrome1(text, i - 1, j - 1);
    }
    return true;
}

bool palindrome3 (string text, int i, int j){
    for (int i = 0; i < text.length(); i++){
        text[i] = tolower(text[i]);
        if (ispunct(text[i])){
            cout << "punctuation found.";
            text.erase(i);
            j--;
        }
    }
    if (text[i] != text[j]){
        return false;
    }
    if (i < j) {
        palindrome1(text, i - 1, j - 1);
    }
    return true;
}

bool match_chars(string chars, int i, string source, int j){
    for (int v = j; v < source.length(); v++){
        if (chars[i] == source[v]){
            
        }
    }
}

int main() {
    cout << power(2, 6) << endl;
    cout << better_power(3.5, 5) << endl;
    cout << palindrome1("Otto", 0, 3) << endl;
    cout << palindrome2("Otto", 0, 3) << endl;
    cout << palindrome3("Madam, I'm Adam.", 0, 15);
    return 0;
}
