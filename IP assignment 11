#include <iostream>
#include <cassert>
using namespace std;

/* assignment 11
   Reinier Sanders,    s4335422
   Laurens Kubat,      s4626249
 */
double power(double base, int exponent){
    // preconditions
    assert(exponent >= 0);
    // postconditions the result is recursively multiplied by its own base until the exponent reaches 0.
    double result = 0;
    if (exponent == 0){
        result = 1;
    }
    else{
        result = base * power(base, exponent - 1);
    }
    return  result;
}

double better_power(double base, int exponent) {
    assert(exponent >= 0 );

    double result = 0;
    if (exponent == 0){
        result = 1;
        return result;
    }
    if (exponent % 2 == 0 ){
        exponent = exponent / 2;
        result = better_power(base, exponent) * better_power(base, exponent);
        return result;
    }
    exponent = exponent / 2;
    result = base * better_power(base, exponent) * better_power(base, exponent);
    return result;
}


int main() {
    cout << power(2, 6) << endl;
    cout << better_power(3.5, 5);
    return 0;
}
