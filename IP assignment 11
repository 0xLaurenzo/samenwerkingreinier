#include <iostream>
#include <cassert>
#include <string>
using namespace std;

/* assignment 11
   Reinier Sanders,    s4335422
   Laurens Kubat,      s4626249
 */
double power(double base, int exponent){
    // Precondition:
    assert(exponent >= 0);
    // Postcondition: the result is recursively multiplied by its own base until the exponent reaches 0.
    double result = 0;
    if (exponent == 0){
        result = 1;
    }
    else{
        result = base * power(base, exponent - 1);
    }
    return result;
}
// Run-time order complexity: O(n) (you multiply the base n times).

double better_power(double base, int exponent) {
    // Precondition:
    assert(exponent >= 0 );
    /* Postcondition: if exponent is 0, the result is always 1. If the exponent is even, divide it by 2 and multiply the base
       to the power of the new exponent twice. If the exponent is odd, do the same as the previous, but multiply it with the
       base once more in order to end up with the original odd exponent. */
    double buffer = 0;
    double result = 0;
    if (exponent == 0){
        result = 1;
        return result;
    }
    if (exponent % 2 == 0 ){
        exponent = exponent / 2;
        buffer = better_power(base, exponent);
        result = buffer * buffer;
        return result;
    }
    exponent = exponent / 2;
    buffer = better_power(base, exponent);
    result = base * buffer * buffer;
    return result;
}
/*  Run-time order complexity: since we first divide the exponent by 2 and multiply those results once, instead of doing the full
    n times of calculations, we reduce the amount of calculations from n to sqrt(n) times. Example: take 2^16 as input. Normally,
    we would multiply 2 with itself 16 times. Now we first divide the exponent in this way:
    Result: 2^16    (Total #calculations)
    = 2^8 * 2^8     (1 calculation)
    = 2^4 * 2^4     (2 calculations)
    = 2^2 * 2^2     (3 calculations)
    = 2 * 2         (4 calculations = sqrt(16))
    So the run-time order complexity is O(sqrt(n)).
    If the exponent is odd, we do 1 more multiplication so the run-time order complexity becomes O(1 + sqrt(n)), but this is
    equal to O(sqrt(n)), so it does not matter whether the exponent is even or odd. */

bool palindrome1(string text, int i, int j){
    // Precondition:
    assert(text.lentgh() > 0);
    // Postcondition:
    if (text[i] != text[j]){
        return false;
    }
    if (i < j) {
        palindrome1(text, i - 1, j - 1);
    }
    return true;
}

bool palindrome2 (string text, int i, int j){
    // Precondition:
    assert(text.lentgh() > 0);
    // Postcondition:
    for (int i = 0; i < text.length(); i++){
        text[i] = tolower(text[i]);
    }
    if (text[i] != text[j]){
        return false;
    }
    if (i < j) {
        palindrome1(text, i - 1, j - 1);
    }
    return true;
}

bool palindrome3 (string text, int i, int j){
    // Precondition:
    assert(text.lentgh() > 0);
    // Postcondition:
    for (int i = 0; i < text.length(); i++){
        text[i] = tolower(text[i]);
        if (ispunct(text[i])){
            text.erase(i);
            j--;
        }
    }
    if (text[i] != text[j]){
        return false;
    }
    if (i < j) {
        palindrome1(text, i - 1, j - 1);
    }
    return true;
}

bool match_chars(string chars, int i, string source, int j){
    // Precondition:
    assert(chars.lentgh() > 0 && source.length() > 0);
    // Postcondition:
    for(i; i < chars.length(); i++){
        for(j; j < source.length(); j++){
            chars[i] = tolower(chars[i]);
            source[j] = tolower(source[j]);
            if(chars[i] == source[j]){
                i++;
                j++;
                if(i == chars.length()){
                    return true;
                }
                match_chars(chars, i, source, j);
            }
        }
    }
    return false;
}

int main() {
    cout << "Power: " << power(2, 6) << endl;
    cout << "Better power: " << better_power(3.5, 5) << endl;
    cout << "Palindrome1: " << palindrome1("Otto", 0, 3) << endl;
    cout << "Palindrome2: " << palindrome2("Otto", 0, 3) << endl;
    cout << "Palindrome3: " << palindrome3("Madam, I'm Adam.", 0, 15) << endl;;
    cout << "Match characters: " << match_chars("abc", 0, "It is a bag of cards", 0) << endl;;
    return 0;
}
